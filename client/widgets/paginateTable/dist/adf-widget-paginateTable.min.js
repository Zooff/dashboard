!function(t,e){"use strict";function a(t){t.widget("paginateTable",{title:"paginateTable",description:"Displays a table of data from a json url",templateUrl:"{widgetsPath}/paginateTable/src/view/view.html",controller:"paginateTableController",controllerAs:"pt",reload:!0,resolve:{data:["paginateTableService","config",function(t,e){return t.get(e)}]},edit:{controller:"paginateTableEditController",controllerAs:"pt",templateUrl:"{widgetsPath}/paginateTable/src/edit/edit.html"}})}function r(t,e,a){var r=this;t&&(this.data=t,this.data.currentPage=1,this.data.maxSize=5,this.orderField=0,console.log(this.orderField),this.reverseSort=!1,this.sortIndex=function(t){return r.reverseSort=!r.reverseSort,r.orderField=t},this.sorter=function(t){return t[r.orderField]}),console.log(t)}function l(t){function e(){return t.columns||(t.columns=[]),t.columns}this.config=t,this.addColumn=function(){e().push({})},this.removeColumn=function(t){e().splice(t,1)}}function n(t,e,a){function r(t,e){var r=[];return angular.forEach(t.columns,function(t,l){t.title&&t.path&&(e.headers[l]=t.title,r.push({title:t.title,path:a(t.path)}))}),r}function l(t,e){var l={headers:[],rows:[],itemPerPage:t.itemPerPage},n=e;t.root&&(n=a(t.root)(e));var i=r(t,l);return angular.forEach(n,function(t){var e=[];angular.forEach(i,function(a,r){var l=a.path(t);e[r]=l}),l.rows.push(e)}),l.totalItems=l.rows.length,l.columns=t.columns,l}function n(t){return e.get(t.url).then(function(t){return t.data}).then(function(e){return l(t,e)})}function i(t){var e=null;return t.url&&(e=n(t)),e}return{get:i}}angular.module("adf.widget.paginateTable",["adf.provider"]).config(a),a.$inject=["dashboardProvider"],angular.module("adf.widget.paginateTable").run(["$templateCache",function(t){t.put("{widgetsPath}/paginateTable/src/edit/edit.html",'<form role=form><div class=form-group><label for=sample>URL</label> <input type=text class=form-control ng-model=config.url placeholder="Enter url"></div><div class=form-group><label for=sample>Root element</label> <input type=text class=form-control ng-model=config.root placeholder="Enter name of root element"></div><div><label>Columns</label></div><div class="form-inline padding-bottom" ng-repeat="col in pt.config.columns"><div class=form-group><label class=sr-only for=title-{{$index}}>Title</label> <input type=text id=title-{{$index}} class=form-control placeholder=Title ng-model=col.title required></div><div class=form-group><label class=sr-only for=path-{{$index}}>Path</label> <input type=text id=path-{{$index}} class=form-control placeholder=Path ng-model=col.path required></div><button type=button class="btn btn-warning" ng-click=pt.removeColumn($index)><i class="fa fa-minus"></i> Remove</button></div><button type=button class="btn btn-primary" ng-click=pt.addColumn()><i class="fa fa-plus"></i> Add</button><div><label>Pagination</label></div><div class=form-group><label class=sr-only for=maxSize>Item par Page</label> <input type=text id=maxSize class=form-control placeholder="Item Per Page" ng-model=config.itemPerPage></div></form>'),t.put("{widgetsPath}/paginateTable/src/view/view.html",'<div><div ng-hide=pt.data class="alert alert-info" role=alert>Please insert a url to the widget configuration</div><div ng-show=pt.data><table class=table><tr><th ng-repeat="head in pt.data.headers" ng-click=pt.sortIndex($index)>{{head}}</th></tr><tr ng-repeat="row in filterData = (pt.data.rows | filter:q )| orderBy:pt.sorter:pt.reverseSort| startFrom: (pt.data.currentPage-1)*pt.data.itemPerPage | limitTo:pt.data.itemPerPage track by $index"><td ng-repeat="col in row">{{col}}</td></tr></table><div class="text-center col-md-3"><input type=search ng-model=q placeholder=Filter class=form-control></div><div class=text-center><ul uib-pagination total-items=filterData.length ng-model=pt.data.currentPage max-size=pt.data.maxSize class=pagination-sm boundary-links=true items-per-page=pt.data.itemPerPage num-pages=numPages></ul></div></div></div>')}]),angular.module("adf.widget.paginateTable").controller("paginateTableController",r),r.$inject=["data","$filter","$scope"],angular.module("adf.widget.paginateTable").controller("paginateTableEditController",l),l.$inject=["config"],angular.module("adf.widget.paginateTable").service("paginateTableService",n),n.$inject=["$q","$http","$parse"],angular.module("adf.widget.paginateTable").filter("startFrom",function(){return function(t,e){if(t&&t.length)return t.slice(e)}})}(window);